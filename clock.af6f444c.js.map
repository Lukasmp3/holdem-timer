{"version":3,"sources":["../src/ts/clock.ts"],"names":[],"mappings":"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","file":"clock.af6f444c.js","sourceRoot":"../src","sourcesContent":["import { SessionHandler } from \"./session-handler\";\nimport { Session } from \"./session\";\nimport { Control } from \"./control\";\n\n/**\n * Controlls all dynamic clocks on the 'screen-timer'\n */\nexport class Clock {\n\n    private static UPDATE_INTERVAL_MS: number = 1000;\n\n    private _sessionHandler: SessionHandler;\n\n    private _control: Control;\n\n    constructor(sessionHandler: SessionHandler, control: Control) {\n        this._sessionHandler = sessionHandler;\n        this._control = control;\n        this.init();\n    }\n\n    private getCurrentSession(): Session { return this._sessionHandler.session }\n\n    /**\n     * Update all timers and periodically repeat\n     */\n    private init(): void {\n\n        let previousTime = Date.now();\n        let currentTime: number;\n        this.updateAllTimers(0);\n\n        setInterval(() => {\n            currentTime = Date.now();\n            const elapsedTime = currentTime - previousTime;\n            this.updateAllTimers(elapsedTime);\n            previousTime = currentTime;\n        },\n            Clock.UPDATE_INTERVAL_MS\n        );\n\n    }\n\n    /**\n     * The main function responsible for updating and rendering of blinds and timers.\n     * If the current level has reached the end, increase the level and playu sound.\n     * If the session is paused, don't update the timers.\n     * \n     * @param realElapsedTimeMs elapsed times from last iteration \n     */\n    private updateAllTimers(realElapsedTimeMs: number): void {\n        if (this.getCurrentSession().remainingLevelDurationMs <= 0) {\n            this._control.setNextLevel();\n            this.playNewRoundSound();\n        }\n\n        if (!this._control.isSessionPaused()) {\n            // If the session just started, play the new round sound\n            if (!this.getCurrentSession().hasStarted) this.playNewRoundSound(); \n            this.getCurrentSession().hasAlreadyStarted();\n\n            this.updateSessionDurations(realElapsedTimeMs);\n        }\n\n        this.renderRealTimer();\n        this.renderSessionTimer();\n        this.renderRoundTimer();\n    }\n\n    /**\n     * Update session duration and remaining level duration\n     */\n    private updateSessionDurations(realElapsedTimeMs: number): void {\n        const session = this.getCurrentSession();\n        session.increaseSessionDuration(realElapsedTimeMs);\n        session.decreaseRemainingLevelDuration(realElapsedTimeMs);\n    }\n\n    private renderSessionTimer(): void {\n        const sessionTimeMs = this.getCurrentSession().sessionDurationMs;\n        const sessionTime = Clock.millisToMinutesAndSeconds(sessionTimeMs);\n\n        const timeSessionEl = document.querySelector(\"#time-session-clock\") as HTMLInputElement;\n        timeSessionEl.textContent = sessionTime;\n    }\n\n    private renderRoundTimer(): void {\n        const roundTimeMs = this.getCurrentSession().remainingLevelDurationMs;\n        const roundTime = Clock.millisToMinutesAndSeconds(roundTimeMs);\n        // console.log('Round time=' + roundTime)\n        const timerRoundEl = document.querySelector('#time-round') as HTMLInputElement;\n        timerRoundEl.textContent = roundTime;\n    }\n\n    /**\n     * Update the real time for element #time-real\n     */\n    private renderRealTimer(): void {\n        const timeReal = Clock.getCurrentTime()\n        const timeRealEl = document.querySelector(\"#time-real\") as HTMLInputElement;\n        // timeRealEl.innerText = timeReal;\n        timeRealEl.textContent = timeReal;\n    }\n\n    /**\n     * Play the sound if the application isn't muted \n     */\n    private playNewRoundSound(): void {\n        const isMuted = !(document.getElementById('sound-toggle') as HTMLInputElement).checked;\n        if (isMuted) {\n            return;\n        } else {\n            const soundToPlay = this._control.getCustomSound() || document.getElementById('sound-round-new') as HTMLAudioElement;\n            // const audio = document.getElementById('sound-round-new') as HTMLAudioElement;\n            soundToPlay.play();\n        }\n\t\t\n\t}\n\n\n    /**\n     * Get the current time string and prepend zeros to minute value:\n     * Exaple values:\n     *   14:05\n     *    5:45\n     * @returns hour:minute string\n     */\n    private static getCurrentTime(): string {\n        const currentTime = new Date();\n        const hours = currentTime.getHours();\n        const minutes = currentTime.getMinutes();\n        return String(hours).padStart(2) + ':' + String(minutes).padStart(2, '0');\n    }\n\n    /**\n     * TODO: support for hours\n     * Source:\n     *   https://stackoverflow.com/a/21294619/13134499\n     */\n    private static millisToMinutesAndSeconds(millis: number): string {\n        const minutes = Math.floor(millis / 60000);\n        const seconds = Number(((millis % 60000) / 1000).toFixed(0));\n        return (\n            seconds == 60 ?\n                (minutes + 1) + \":00\" :\n                minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds\n        );\n    }\n}\n"]}