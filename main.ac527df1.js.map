{"version":3,"sources":["../src/ts/clock.ts","../../src/ts/blinds/blind-level.ts","../../src/ts/blinds/blind-values.ts","../../src/ts/blinds/blind-structure.ts","../src/ts/session.ts","../src/ts/control.ts","../src/ts/session-handler.ts","../src/ts/main.ts"],"names":[],"mappings":"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","file":"main.ac527df1.js","sourceRoot":"../src","sourcesContent":["import { SessionHandler } from \"./session-handler\";\nimport { Session } from \"./session\";\nimport { Control } from \"./control\";\n\n/**\n * Controlls all dynamic clocks on the 'screen-timer'\n */\nexport class Clock {\n\n    private static UPDATE_INTERVAL_MS: number = 1000;\n\n    private _sessionHandler: SessionHandler;\n\n    private _control: Control;\n\n    constructor(sessionHandler: SessionHandler, control: Control) {\n        this._sessionHandler = sessionHandler;\n        this._control = control;\n        this.init();\n    }\n\n    private getCurrentSession(): Session { return this._sessionHandler.session }\n\n    /**\n     * Update all timers and periodically repeat\n     */\n    private init(): void {\n\n        let previousTime = Date.now();\n        let currentTime: number;\n        this.updateAllTimers(0);\n\n        setInterval(() => {\n            currentTime = Date.now();\n            const elapsedTime = currentTime - previousTime;\n            this.updateAllTimers(elapsedTime);\n            previousTime = currentTime;\n        },\n            Clock.UPDATE_INTERVAL_MS\n        );\n\n    }\n\n    /**\n     * The main function responsible for updating and rendering of blinds and timers.\n     * If the current level has reached the end, increase the level and playu sound.\n     * If the session is paused, don't update the timers.\n     * \n     * @param realElapsedTimeMs elapsed times from last iteration \n     */\n    private updateAllTimers(realElapsedTimeMs: number): void {\n        if (this.getCurrentSession().remainingLevelDurationMs <= 0) {\n            this._control.setNextLevel();\n            this.playNewRoundSound();\n        }\n\n        if (!this._control.isSessionPaused()) {\n            // If the session just started, play the new round sound\n            if (!this.getCurrentSession().hasStarted) this.playNewRoundSound(); \n            this.getCurrentSession().hasAlreadyStarted();\n\n            this.updateSessionDurations(realElapsedTimeMs);\n        }\n\n        this.renderRealTimer();\n        this.renderSessionTimer();\n        this.renderRoundTimer();\n    }\n\n    /**\n     * Update session duration and remaining level duration\n     */\n    private updateSessionDurations(realElapsedTimeMs: number): void {\n        const session = this.getCurrentSession();\n        session.increaseSessionDuration(realElapsedTimeMs);\n        session.decreaseRemainingLevelDuration(realElapsedTimeMs);\n    }\n\n    private renderSessionTimer(): void {\n        const sessionTimeMs = this.getCurrentSession().sessionDurationMs;\n        const sessionTime = Clock.millisToMinutesAndSeconds(sessionTimeMs);\n\n        const timeSessionEl = document.querySelector(\"#time-session-clock\") as HTMLInputElement;\n        timeSessionEl.textContent = sessionTime;\n    }\n\n    private renderRoundTimer(): void {\n        const roundTimeMs = this.getCurrentSession().remainingLevelDurationMs;\n        const roundTime = Clock.millisToMinutesAndSeconds(roundTimeMs);\n        // console.log('Round time=' + roundTime)\n        const timerRoundEl = document.querySelector('#time-round') as HTMLInputElement;\n        timerRoundEl.textContent = roundTime;\n    }\n\n    /**\n     * Update the real time for element #time-real\n     */\n    private renderRealTimer(): void {\n        const timeReal = Clock.getCurrentTime()\n        const timeRealEl = document.querySelector(\"#time-real\") as HTMLInputElement;\n        // timeRealEl.innerText = timeReal;\n        timeRealEl.textContent = timeReal;\n    }\n\n    /**\n     * Play the sound if the application isn't muted \n     */\n    private playNewRoundSound(): void {\n        const isMuted = !(document.getElementById('sound-toggle') as HTMLInputElement).checked;\n        if (isMuted) {\n            return;\n        } else {\n            const audio = document.getElementById('sound-round-new') as HTMLAudioElement;\n            audio.play();\n        }\n\t\t\n\t}\n\n\n    /**\n     * Get the current time string and prepend zeros to minute value:\n     * Exaple values:\n     *   14:05\n     *    5:45\n     * @returns hour:minute string\n     */\n    private static getCurrentTime(): string {\n        const currentTime = new Date();\n        const hours = currentTime.getHours();\n        const minutes = currentTime.getMinutes();\n        return String(hours).padStart(2) + ':' + String(minutes).padStart(2, '0');\n    }\n\n    /**\n     * TODO: support for hours\n     * Source:\n     *   https://stackoverflow.com/a/21294619/13134499\n     */\n    private static millisToMinutesAndSeconds(millis: number): string {\n        const minutes = Math.floor(millis / 60000);\n        const seconds = Number(((millis % 60000) / 1000).toFixed(0));\n        return (\n            seconds == 60 ?\n                (minutes + 1) + \":00\" :\n                minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds\n        );\n    }\n}\n","import {BlindValues} from './blind-values';\n\nexport class BlindLevel {\n\n    private _level: number;\n    private _values: BlindValues;\n\n    /**\n     * If not specified ante is 0. \n     */\n    constructor(level: number, values: BlindValues) {\n        this._level = level;\n        this._values = values;\n\t}\n\n    public get level(): number {\n        return this._level;\n    }\n\n    public get values(): BlindValues {\n        return this._values;\n    }\n    \n}","export class BlindValues {\n\n    private _small: number;\n    private _big: number;\n    private _ante: number;\n\n    /**\n     * If not specified ante is 0. \n     */\n    constructor(small: number, big: number, ante: number = 0) {\n        this._small = small;\n        this._big = big;\n        this._ante = ante;\n\t}\n\n    public get small(): number {\n        return this._small;\n    }\n\n    public get big(): number {\n        return this._big;\n    }\n\n    public get ante(): number {\n        return this._ante;\n    }\n\n    \n}","import {BlindLevel} from './blind-level';\nimport {BlindValues} from './blind-values';\n\nexport class BlindStructure {\n\n    private _blindLevels: BlindLevel[];\n    \n    private _currentLevel: number;\n\n    private _levelDurationSeconds: number;\n    \n    constructor(blindLevels: BlindLevel[], levelDurationSeconds: number = 600) {\n        this._blindLevels = blindLevels;\n        this._currentLevel = 1;\n        this._levelDurationSeconds = levelDurationSeconds;\n\t}\n\n    /**\n     * \n     * @returns true if the level was increased\n     */\n    public increaseCurrentLevel(): boolean {\n        if (this.currentLevel < this._blindLevels.length) {\n            this._currentLevel++;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * \n     * @returns true if the level was decreased\n     */\n    public decreaseCurrentLevel(): boolean {\n        if (this.currentLevel > 1) {\n            this._currentLevel--;\n            return true;\n        }\n        return false;\n    }\n\n    public static initDefaultBlindLevelsWithoutAnte(): BlindLevel[] {\n        return [\n            new BlindLevel(1, new BlindValues(25, 50)), \n            new BlindLevel(2, new BlindValues(50, 100)), \n            new BlindLevel(3, new BlindValues(75, 150)), \n            new BlindLevel(4, new BlindValues(100, 200)), \n            new BlindLevel(5, new BlindValues(150, 300)), \n            new BlindLevel(6, new BlindValues(250, 500)), \n            new BlindLevel(7, new BlindValues(350, 700)), \n            new BlindLevel(8, new BlindValues(500, 1000)), \n            new BlindLevel(9, new BlindValues(750, 1500)), \n            new BlindLevel(10, new BlindValues(1000, 2000)), \n            new BlindLevel(11, new BlindValues(1500, 3000)), \n            new BlindLevel(12, new BlindValues(2000, 4000)), \n        ]\n    }\n\n    public static initDefaultBlindLevelsWithAnte(): BlindLevel[] {\n        return [\n            new BlindLevel(1, new BlindValues(25, 50, 5)), \n            new BlindLevel(2, new BlindValues(50, 100, 5)), \n            new BlindLevel(3, new BlindValues(75, 150, 10)), \n            new BlindLevel(4, new BlindValues(100, 200, 10)), \n            new BlindLevel(5, new BlindValues(150, 300, 25)), \n            new BlindLevel(6, new BlindValues(250, 500, 50)), \n            new BlindLevel(7, new BlindValues(350, 700, 75)), \n            new BlindLevel(8, new BlindValues(500, 1000, 100)), \n            new BlindLevel(9, new BlindValues(750, 1500, 150)), \n            new BlindLevel(10, new BlindValues(1000, 2000, 200)), \n            new BlindLevel(11, new BlindValues(1500, 3000, 250)), \n            new BlindLevel(12, new BlindValues(2000, 4000, 300)), \n        ]\n    }\n\n    public get blindLevels(): BlindLevel[] {\n        return this._blindLevels;\n    }\n\n    public get currentLevel(): number {\n        return this._currentLevel;\n    }\n\n    public get levelDurationSeconds(): number {\n        return this._levelDurationSeconds;\n    }\n\n    public set levelDurationSeconds(durationS: number) {\n        this._levelDurationSeconds = durationS;\n    }\n}","import { BlindStructure } from \"./blinds/blind-structure\";\n\n/**\n * Init and maintains one game session with defined blind structure.\n * \n * Contains information about the total session time and remaining time to the next level.\n */\nexport class Session {\n\n    private _blindStructure: BlindStructure;\n\n    private _sessionDurationMs: number;\n\n    private _remainingLevelDurationMs: number;\n\n    private _hasStarted: boolean = false;\n\n\tconstructor($blindStructure: BlindStructure) {\n\t\tthis._blindStructure = $blindStructure;\n        this._sessionDurationMs = 0;\n        this._remainingLevelDurationMs = $blindStructure.levelDurationSeconds * 1000;\n\t}\n\n    public get blindStructure(): BlindStructure {\n        return this._blindStructure;\n    }\n\n    public get hasStarted(): boolean {\n        return this._hasStarted;\n    }\n\n    public increaseSessionDuration(durationMs: number): void {\n        this._sessionDurationMs += durationMs;\n    }\n\n    public decreaseRemainingLevelDuration(durationMs: number): void {\n        this._remainingLevelDurationMs -= durationMs;\n    }\n\n    public resetRemainingLevelDuration(): void {\n        this._remainingLevelDurationMs = this._blindStructure.levelDurationSeconds * 1000;\n    }\n\n    public static initDefaultSession(): Session {\n        return new Session(new BlindStructure(BlindStructure.initDefaultBlindLevelsWithoutAnte()));\n    }\n\n    public static initDefaultSessionWithAnte(): Session {\n        return new Session(new BlindStructure(BlindStructure.initDefaultBlindLevelsWithAnte()));\n    }\n\n\n    /**\n     * Getter sessionTimeSeconds\n     * @return {number}\n     */\n\tpublic get sessionDurationMs(): number {\n\t\treturn this._sessionDurationMs;\n\t}\n    \n\n    /**\n     * Getter remainingLevelDurationSeconds\n     * @return {number}\n     */\n\tpublic get remainingLevelDurationMs(): number {\n\t\treturn this._remainingLevelDurationMs;\n\t}\n\n    public hasAlreadyStarted(): void {\n        this._hasStarted = true;\n    }\n\n\n}","import { Session } from \"./session\";\nimport { SessionHandler } from \"./session-handler\";\n\nexport class Control {\n\n\tprivate sessionHandler: SessionHandler;\n\n\tconstructor(sessionHandler: SessionHandler) {\n\t\tthis.sessionHandler = sessionHandler;\n\t\tthis.onClick('control-rewind', () => this.setPreviousLevel());\n\t\tthis.onClick('control-forward', () => this.setNextLevel());\n\t\tthis.onChange('screen-a', () => this.initDefaultSession());\n\t\tthis.onChange('screen-b', () => this.runNewSession());\n\t}\n\n\tpublic isSessionPaused(): boolean {\n\t\tconst pauseEl = document.querySelector(\"#input-control-pause\") as HTMLInputElement;\n\t\treturn (pauseEl.checked) ? true : false;\n\t}\n\n\t/**\n\t * Increase level and re-render if changed\n\t */\n\t public setNextLevel(): void {\n\t\tif (this.getCurrentSession().blindStructure.increaseCurrentLevel()) {\n\t\t\tthis.getCurrentSession().resetRemainingLevelDuration();\n\t\t\tthis.renderBlindStructure();\n\t\t}\n\t}\n\n\tprivate getCurrentSession(): Session {return this.sessionHandler.session}\n\n\t\n\tprivate onClick(id: string, cb: () => void): void {\n\t\tconst el = document.getElementById(id) as HTMLElement;\n\t\tel.addEventListener('click', cb);\n\t}\n\n\tprivate onChange(newId: string, cb: () => void): void {\n\t\tconst el = document.getElementById(newId) as HTMLElement;\n\t\tel.addEventListener('change', cb);\n\t}\n\n\tprivate initDefaultSession(): void {\n\t\tconsole.log('Init default session');\n\t\tthis.sessionHandler.session = Session.initDefaultSession();\n\t}\n\n\tprivate runNewSession(): void {\n\t\tthis.setBlindsStucture();\n\t\tthis.renderNewSession();\n\t\tthis.renderBlindStructure();\n\t}\n\n\tprivate setBlindsStucture(): void {\n\t\tconst anteIsEnabled = (document.getElementById(\"ante-toggle\") as HTMLInputElement).checked;\n\t\tif (anteIsEnabled) {\n\t\t\tthis.sessionHandler.session = Session.initDefaultSessionWithAnte();\n\t\t}\n\t\telse {\n\t\t\tthis.sessionHandler.session = Session.initDefaultSession();\n\t\t}\n\n\t\tconst levelDuration = (document.getElementById(\"duration-option\") as HTMLInputElement).value;\n\t\tconsole.log('Create a new blind structure with level duration=' + levelDuration);\n\t\tthis.getCurrentSession().blindStructure.levelDurationSeconds = 60 * Number(levelDuration);\n\n\t\t\n\t\tthis.getCurrentSession().resetRemainingLevelDuration();\n\t}\n\n\t/**\n\t * Creates a new configured session \n\t */\n\tprivate renderNewSession(): void {\n\t\tconsole.log('Start the session');\n\t\t(document.querySelector('#input-control-play') as HTMLInputElement).checked = false;\n\t\t(document.querySelector('#input-control-pause') as HTMLInputElement).checked = true;\n\t}\n\n\tprivate renderBlindStructure(): void {\n\t\tconst blindStructure = this.getCurrentSession().blindStructure;\n\t\tconst currentLevel = blindStructure.currentLevel;\n\t\tconst currentBlindLevelValues = blindStructure.blindLevels[currentLevel-1].values;\n\t\tconst blindsValueText = currentBlindLevelValues.small.toString() + '\\n' + currentBlindLevelValues.big.toString();\n\t\tthis.renderBlindInformation('blinds-value', blindsValueText);\n\t\tthis.renderBlindInformation('blinds-round', currentLevel.toString());\n\t\tthis.renderBlindInformation('blinds-ante', currentBlindLevelValues.ante.toString());\n\t}\n\n\tprivate renderBlindInformation(id: string, value: string) {\n\t\tconst blindsValueEl = document.getElementById(id) as HTMLElement;\n\t\tblindsValueEl.innerText = value;\n\t}\n\n\t/**\n\t * Decrease level and re-render\n\t */\n\tprivate setPreviousLevel(): void {\n\t\tthis.getCurrentSession().blindStructure.decreaseCurrentLevel();\n\t\tthis.getCurrentSession().resetRemainingLevelDuration();\n\t\tthis.renderBlindStructure();\n\t}\n\n}\n","import { Session } from \"./session\";\n\n/**\n * Dummy implementation of session handler\n * \n * TODO: Only one session shoudl exist at one time (singleton)\n */\nexport class SessionHandler {\n\n    private _session: Session;\n\n    public constructor() {\n        console.log('Create a new session');\n        this._session = Session.initDefaultSession();\n    }\n\n    public set session(session: Session) {\n        this._session = session;\n    }\n\n    public get session(): Session {\n        return this._session;\n    }\n\n}","import { Clock } from './clock';\nimport { Control } from './control';\nimport { SessionHandler } from './session-handler';\n\n\n\nfunction init() {\n\n    const sessionHandler = new SessionHandler();\n    const control = new Control(sessionHandler);\n    new Clock(sessionHandler, control);\n\n}\n\nwindow.addEventListener('load', () => init());\n"]}